{"version":3,"sources":["components/home/FriendChatBox.js","components/home/FriendMessage.js","components/home/MessageBox.js"],"names":["FriendChatBox","props","id","firstName","lastName","online","profilePicUrl","placeholder_user_image","imgClassName","userService","getImageSize","userNameFormatted","formatUsername","onlineStatusClass","react_default","a","createElement","className","onClick","e","showUserChatBox","concat","src","alt","FriendMessage","content","fromUserId","time","chatContentClass","getUserId","dayTime","hour","month","substring","toLowerCase","minute","fromUserProfilePicUrl","dayOfMonth","MessageBox","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","initializeWebSocketConnection","ws","SockJS","serverUrl","stompClient","Stomp","over","headers","getAuthHeader","connect","frame","_isMounted","setState","clientConnected","subscribe","message","body","messageBody","JSON","parse","state","chatUserId","addMessage","formattedUserNames","fromUserFirstName","fromUserLastName","toast","info","common","infoToast","text","position","POSITION","TOP_RIGHT","loadAllUnreadMessages","parsedBody","changeUserOnlineStatus","error","errorToast","token","localStorage","getItem","length","Authorization","getAllMessages","fetchAllMessages","loadAllChatFriends","userId","handleBlur","field","event","touched","objectSpread","defineProperty","validate","changeHeight","userBoxHeight","changeChatBoxHeight","chatBoxHeight","changeChatBoxDisplay","chatBoxDisplay","data","chatUserNameFormatted","chatUserFirstName","chatUserLastName","chatUserProfilePicUrl","shouldScrollDown","closeUserChatBox","getOnlineUserCount","friendsChatArr","filter","user","loggedInUserId","friendsArrLength","getBaseUrl","bind","assertThisInitialized","onChangeHandler","onSubmitHandler","prevProps","prevState","_this2","allMessagesArr","scrollDown","scrollTop","triggerMessageLoad","userData","errorMessage","getErrorMessage","successMessage","getSuccessMessage","success","successToast","disconnect","fetchAllChatFriends","hasError","payload","send","stringify","preventDefault","canBeSubmitted","_this$state","toUserId","sendMessage","target","name","value","errors","keys","some","x","document","getElementById","scrollHeight","getBoundingClientRect","height","container","webSocketMessage","updateUserStatus","_this3","console","log","isEnabled","displayButon","loggedInUserFirstName","getFirstName","_this$state2","imageClassUserPick","firstNameFormatted","react","style","color","map","friend","home_FriendChatBox","assign","key","home_FriendMessage","onSubmit","react_autosize_textarea_lib_default","onChange","onBlur","aria-describedby","placeholder","maxRows","disabled","visibility","type","Component","dispatch","fetchAllChatFriendsAction","fetchAllMessagesAction","updateUserStatusAction","addMessageAction","fetchAllUnreadMessagesAction"],"mappings":"iTA+BeA,EA3BO,SAACC,GAAU,IACrBC,EAAoCD,EAApCC,GAAIC,EAAgCF,EAAhCE,UAAWC,EAAqBH,EAArBG,SAAWC,EAAUJ,EAAVI,OAE5BC,EAAgBL,EAAMK,eAAiBC,IAEzCC,EAAe,GACfF,IACAE,EAAeC,IAAYC,aAAaJ,IAG5C,IAAIK,EAAoBF,IAAYG,eAAeT,EAAWC,EAAU,IAEpES,EAAoBR,EAAS,gBAAkB,iBAEnD,OACIS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BAA8BC,QAAS,SAACC,GAAD,OAAOlB,EAAMmB,gBAAgB,CAAClB,KAAIC,YAAWC,WAAUE,iBAAgBa,KACzHL,EAAAC,EAAAC,cAAA,KAAGC,UAAS,iBAAAI,OAAmBR,KAC/BC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAWT,EAAcc,IAAKhB,EAAeiB,IAAI,gBAE1DT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uBAAuBN,EAApC,QCkBDa,UArCO,SAACvB,GAAU,IACrBwB,EAA6BxB,EAA7BwB,QAASC,EAAoBzB,EAApByB,WAAYC,EAAQ1B,EAAR0B,KAGzBC,EAAmB,GAEnBF,IAJmBjB,IAAYoB,cAK/BD,EAAmB,gBAGvB,IAAME,EAAU7B,EAAM0B,KAAKI,MAAQ,GAAK,KAAO,KACzCC,EAAQ/B,EAAM0B,KAAKK,MAAMC,UAAU,EAAG,GAAKhC,EAAM0B,KAAKK,MAAMC,UAAU,EAAG,GAAGC,cAC5EH,EAAO9B,EAAM0B,KAAKI,KAAO,GAAK,IAAM9B,EAAM0B,KAAKI,KAAO9B,EAAM0B,KAAKI,KACjEI,EAASlC,EAAM0B,KAAKQ,OAAS,GAAK,IAAMlC,EAAM0B,KAAKQ,OAASlC,EAAM0B,KAAKQ,OAEvE7B,EAAgBL,EAAMmC,uBAAyB7B,IAEjDC,EAAe,GAKnB,OAJIF,IACAE,EAAeC,IAAYC,aAAaJ,IAIxCQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAS,iBAAAI,OAAmBO,IAC7Bd,EAAAC,EAAAC,cAAA,OAAKC,UAAWT,EAAcc,IAAKhB,EAAeiB,IAAI,gBAE1DT,EAAAC,EAAAC,cAAA,OAAKC,UAAS,uBACVH,EAAAC,EAAAC,cAAA,KAAGC,UAAS,mBAAAI,OAAqBO,IAAjC,IAAuDH,EAAvD,KACAX,EAAAC,EAAAC,cAAA,OAAKC,UAAS,gBAAAI,OAAkBO,IAC5Bd,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,IAA8BU,EAAKU,WAAnC,IAAgDL,EAAhD,IAAwDD,EAAxD,IAA+DI,EAA/D,IAAwEL,oFCpBtFQ,cACF,SAAAA,EAAYrC,GAAO,IAAAsC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMzC,KA+GV6C,8BAAgC,WAC5B,IAAMC,EAAK,IAAIC,IAAOT,EAAKU,WAC3BV,EAAKW,YAAcC,IAAMC,KAAKL,GAC9B,IAAMM,EAAUd,EAAKe,gBAErBf,EAAKW,YAAYK,QAAQF,EAAS,SAACG,GAC3BjB,EAAKkB,aACLlB,EAAKmB,SAAS,CAAEC,iBAAiB,IACjCpB,EAAKW,YAAYU,UAAU,8BAA+B,SAACC,GACvD,GAAIA,EAAQC,KAAM,CACd,IAAMC,EAAcC,KAAKC,MAAMJ,EAAQC,MAKvC,IAJIvB,EAAKkB,YAAeM,EAAYrC,aAAea,EAAK2B,MAAMC,YAAcJ,EAAYrC,aAAejB,IAAYoB,aAC/GU,EAAKtC,MAAMmE,WAAWL,GAGtBA,EAAYrC,aAAejB,IAAYoB,YAAa,CACpD,IAAMwC,EAAqB5D,IAAYG,eAAemD,EAAYO,kBAAmBP,EAAYQ,kBAEjGC,QAAMC,KAAK3D,EAAAC,EAAAC,cAAC0D,EAAA,EAAeC,UAAhB,CAA0BC,KAAI,+BAAAvD,OAAiCgD,EAAjC,OAA4D,CACjGQ,SAAUL,QAAMM,SAASC,YAG7BxC,EAAKtC,MAAM+E,4BAKvBzC,EAAKW,YAAYU,UAAU,cAAe,SAACC,GACvC,GAAIA,EAAQC,KAAM,CACd,IAAMmB,EAAajB,KAAKC,MAAMJ,EAAQC,MACtCvB,EAAK2C,uBAAuBD,MAIpC1C,EAAKW,YAAYU,UAAU,eAAgB,SAACC,GACxC,GAAIA,EAAQC,KAAM,CACd,IAAMmB,EAAajB,KAAKC,MAAMJ,EAAQC,MACtCvB,EAAK2C,uBAAuBD,QAIzC,WACCT,QAAMW,MAAMrE,EAAAC,EAAAC,cAAC0D,EAAA,EAAeU,WAAhB,CAA2BR,KAAI,sBAAAvD,OAAwBkB,EAAKU,UAA7B,sCAA8E,CACrH4B,SAAUL,QAAMM,SAASC,eA3JlBxC,EA6KnBe,cAAgB,WACZ,IAAM+B,EAAQC,aAAaC,QAAQ,SACnC,OAAQF,GAASA,EAAMG,OACjB,CAAEC,cAAA,UAAApE,OAA2BgE,IAC7B,IAjLS9C,EAoLnBmD,eAAiB,SAACvB,GACd5B,EAAKtC,MAAM0F,iBAAiBxB,IArLb5B,EAwLnBqD,mBAAqB,WACjB,IAAMC,EAASpF,IAAYoB,YAC3BU,EAAKtC,MAAM2F,mBAAmBC,IA1LftD,EAqNnBuD,WAAa,SAACC,GAAD,OAAW,SAACC,GACrBzD,EAAKmB,SAAS,CACVuC,QAAQzD,OAAA0D,EAAA,EAAA1D,CAAA,GAAMD,EAAK2B,MAAM+B,QAAlBzD,OAAA2D,EAAA,EAAA3D,CAAA,GAA4BuD,GAAQ,QAvNhCxD,EAkOnB6D,SAAW,SAAC3E,GACR,MAAO,CACHA,QAA4B,IAAnBA,EAAQ+D,SApONjD,EAwOnB8D,aAAe,WAEW,KADA9D,EAAK2B,MAAMoC,cAE7B/D,EAAKmB,SAAS,CAAE4C,cAAe,WAE/B/D,EAAKmB,SAAS,CAAE4C,cAAe,MA7OpB/D,EAiPnBgE,oBAAsB,WAEI,KADAhE,EAAK2B,MAAMsC,cAE7BjE,EAAKmB,SAAS,CAAE8C,cAAe,0BAE/BjE,EAAKmB,SAAS,CAAE8C,cAAe,MAtPpBjE,EA0PnBkE,qBAAuB,WAEI,KADAlE,EAAK2B,MAAMwC,eAE9BnE,EAAKmB,SAAS,CAAEgD,eAAgB,iBAEhCnE,EAAKmB,SAAS,CAAEgD,eAAgB,MA/PrBnE,EAmQnBnB,gBAAkB,SAACuF,EAAMX,GAAU,IACvB9F,EAA2CyG,EAA3CzG,GAAIC,EAAuCwG,EAAvCxG,UAAWC,EAA4BuG,EAA5BvG,SAAUE,EAAkBqG,EAAlBrG,cAC7BsG,EAAwBnG,IAAYG,eAAeT,EAAWC,EAAU,IAC5EmC,EAAKmB,SAAS,CACVS,WAAYjE,EACZ2G,kBAAmB1G,EACnB2G,iBAAkB1G,EAClBwG,wBACAG,sBAAuBzG,EACvB0G,kBAAkB,EAClBN,eAAgB,GAChBF,cAAe,GACf/E,QAAS,IACV,WACCc,EAAKmD,eAAexF,MAjRTqC,EAqRnB0E,iBAAmB,WACf1E,EAAKmB,SAAS,CAAEgD,eAAgB,kBAtRjBnE,EAwSnB2E,mBAAqB,WAEjB,OADiB3E,EAAKtC,MAAMkH,eAAeC,OAAO,SAAAC,GAAU,OAAuB,IAAhBA,EAAKhH,SACtDmF,QAvSlBjD,EAAK2B,MAAQ,CACToD,eAAgB,GAChBnD,WAAY,GACZ0C,kBAAmB,GACnBC,iBAAkB,GAClBF,sBAAuB,GACvBG,sBAAuB,GACvBT,cAAe,SACfE,cAAe,GACfE,eAAgB,eAChBjF,QAAS,GACTuF,kBAAkB,EAClBO,iBAAkB,EAClB5D,iBAAiB,EACjBsC,QAAS,CACLxE,SAAS,IAIjBc,EAAKkB,YAAa,EAElBlB,EAAKU,UAAYxC,IAAY+G,aAAe,UAC5CjF,EAAKW,YAAc,KAEnBX,EAAKuD,WAAavD,EAAKuD,WAAW2B,KAAhBjF,OAAAkF,EAAA,EAAAlF,QAAAkF,EAAA,EAAAlF,CAAAD,KAClBA,EAAKoF,gBAAkBpF,EAAKoF,gBAAgBF,KAArBjF,OAAAkF,EAAA,EAAAlF,QAAAkF,EAAA,EAAAlF,CAAAD,KACvBA,EAAKqF,gBAAkBrF,EAAKqF,gBAAgBH,KAArBjF,OAAAkF,EAAA,EAAAlF,QAAAkF,EAAA,EAAAlF,CAAAD,KACvBA,EAAKnB,gBAAkBmB,EAAKnB,gBAAgBqG,KAArBjF,OAAAkF,EAAA,EAAAlF,QAAAkF,EAAA,EAAAlF,CAAAD,KACvBA,EAAKkE,qBAAuBlE,EAAKkE,qBAAqBgB,KAA1BjF,OAAAkF,EAAA,EAAAlF,QAAAkF,EAAA,EAAAlF,CAAAD,KAC5BA,EAAKmD,eAAiBnD,EAAKmD,eAAe+B,KAApBjF,OAAAkF,EAAA,EAAAlF,QAAAkF,EAAA,EAAAlF,CAAAD,KACtBA,EAAKqD,mBAAqBrD,EAAKqD,mBAAmB6B,KAAxBjF,OAAAkF,EAAA,EAAAlF,QAAAkF,EAAA,EAAAlF,CAAAD,KAjCXA,mFAqCf,IAAMsD,EAASpF,IAAYoB,YAC3Ba,KAAKgB,SAAS,CACV4D,eAAgBzB,IAGpBnD,KAAKI,gCACLJ,KAAKkD,qBAELlD,KAAKe,YAAa,6CAGHoE,EAAWC,GAAW,IAAAC,EAAArF,KAmBrC,GAlBIA,KAAKzC,MAAM+H,iBAAmBH,EAAUG,gBACxCtF,KAAKgB,SAAS,CACVjC,QAAS,IACV,WACKsG,EAAK7D,MAAM8C,iBACXe,EAAKE,aAELF,EAAKrE,SAAS,CAAEsD,kBAAkB,GAAQe,EAAKG,eAKvDxF,KAAKzC,MAAMkH,eAAe3B,SAAWqC,EAAUV,eAAe3B,QAC9D9C,KAAKgB,SAAS,CACVgD,eAAgB,iBAIpBhE,KAAKzC,MAAMkI,qBAAuBN,EAAUM,mBAAoB,CAChE,IAAMC,EAAW1F,KAAKzC,MAAMkI,mBAC5BzF,KAAKtB,gBAAgBgH,GAGzB,IAAMC,EAAe3F,KAAK4F,gBAAgBT,EAAWC,GAC/CS,EAAiB7F,KAAK8F,kBAAkBX,EAAWC,GAErDO,EACA7D,QAAMW,MAAMrE,EAAAC,EAAAC,cAAC0D,EAAA,EAAeU,WAAhB,CAA2BR,KAAMyD,IAAkB,CAC3DxD,SAAUL,QAAMM,SAASC,YAEtBwD,GACP/D,QAAMiE,QAAQ3H,EAAAC,EAAAC,cAAC0D,EAAA,EAAegE,aAAhB,CAA6B9D,KAAM2D,IAAoB,CACjE1D,SAAUL,QAAMM,SAASC,2DAMjCrC,KAAKQ,YAAYyF,aACjBjG,KAAKe,YAAa,4CAGJoE,EAAWC,GACzB,OAAKpF,KAAKzC,MAAM2I,oBAAoBC,UAAYnG,KAAKzC,MAAM2I,oBAAoB/E,SAAWnB,KAAKzC,MAAM2I,sBAAwBf,EAAUe,oBAC5HlG,KAAKzC,MAAM2I,oBAAoB/E,SAEhCnB,KAAKzC,MAAM0F,iBAAiBkD,UAAYnG,KAAKzC,MAAM0F,iBAAiB9B,SAAWnB,KAAKzC,MAAM0F,mBAAqBkC,EAAUlC,iBACxHjD,KAAKzC,MAAM0F,iBAAiB9B,QAEhC,6CAGKgE,EAAWC,GACvB,OAAIpF,KAAKzC,MAAM2I,oBAAoBC,UAAYhB,EAAUe,oBAAoBzD,QAAUzC,KAAKzC,MAAM2I,oBAAoBzD,MAC3GzC,KAAKzC,MAAM2I,oBAAoB/E,SAAW,eAE5CnB,KAAKzC,MAAM0F,iBAAiBkD,UAAYhB,EAAUlC,iBAAiBR,QAAUzC,KAAKzC,MAAM0F,iBAAiBR,MACvGzC,KAAKzC,MAAM0F,iBAAiB9B,SAAW,eAG3C,yCA2DCiF,GACRpG,KAAKQ,YAAY6F,KAAK,eAAgB,GAAI/E,KAAKgF,UAAUF,IACzDpG,KAAKgB,SAAS,CAAEjC,QAAS,6CAmBbuE,GAGZ,GAFAA,EAAMiD,iBAEDvG,KAAKwG,iBAAV,CAHmB,IAAAC,EAOuBzG,KAAKwB,MAA3BkF,EAPDD,EAOXhF,WAAsB1C,EAPX0H,EAOW1H,QAE1BiB,KAAKwB,MAAMP,gBACXjB,KAAK2G,YAAY,CAAED,WAAU3H,YAE7B+C,QAAMW,MAAMrE,EAAAC,EAAAC,cAAC0D,EAAA,EAAeU,WAAhB,CAA2BR,KAAI,gCAAqC,CAC5EC,SAAUL,QAAMM,SAASC,qDAKrBiB,GACZtD,KAAKgB,SAALlB,OAAA2D,EAAA,EAAA3D,CAAA,GACKwD,EAAMsD,OAAOC,KAAOvD,EAAMsD,OAAOE,iDAUzB,IACL/H,EAAYiB,KAAKwB,MAAjBzC,QACFgI,EAAS/G,KAAK0D,SAAS3E,GAE7B,OADmBe,OAAOkH,KAAKD,GAAQE,KAAK,SAAAC,GAAC,OAAIH,EAAOG,8CA4DxD,IAAMzI,EAAI0I,SAASC,eAAe,gBAClC3I,EAAE+G,UAAY/G,EAAE4I,aAAe5I,EAAE6I,wBAAwBC,2CAIvCJ,SAASC,eAAe,gBAChC5B,UAAY,uCAItB,IAAMgC,EAAYL,SAASC,eAAe,gBAC1CI,EAAUhC,UAAYgC,EAAUH,4DAQbI,GAAkB,IACrBjK,EAAeiK,EAAvBtE,OAAYxF,EAAW8J,EAAX9J,OACpBqC,KAAKzC,MAAMmK,iBAAiB,CAAElK,KAAIG,4CAG7B,IAAAgK,EAAA3H,KACL,IAAKA,KAAKwB,MAAMP,gBAEZ,OADA2G,QAAQC,IAAI,iBACLzJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yBAAd,iBAHN,IAMGQ,EAAYiB,KAAKwB,MAAjBzC,QACFgI,EAAS/G,KAAK0D,SAAS3E,GACvB+I,GAAahI,OAAOkH,KAAKD,GAAQE,KAAK,SAAAC,GAAC,OAAIH,EAAOG,KAClDa,EAAeD,EAAY,GAAK,SAChCE,EAAwBjK,IAAYkK,eACpCrE,EAAgB5D,KAAKwB,MAAMoC,cAC3BE,EAAgB9D,KAAKwB,MAAMsC,cAC3BE,EAAiBhE,KAAKwB,MAAMwC,eAb7BkE,EAeoDlI,KAAKwB,MAAtD6C,EAfH6D,EAeG7D,sBAAuBH,EAf1BgE,EAe0BhE,sBACzBiE,EAAqBpK,IAAYC,aAAaqG,GAC9C+D,EAAqBrK,IAAYG,eAAe8J,GAEtD,OACI5J,EAAAC,EAAAC,cAAC+J,EAAA,SAAD,KACIjK,EAAAC,EAAAC,cAAA,WAASC,UAAS,wBAAAI,OAA0BiF,IACxCxF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAoBC,QAASwB,KAAK2D,cAC7CvF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,2BAEjBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAa+J,MAAO,CAAEC,MAAO,UAA3C,eACiBvI,KAAKwE,uBAG1BpG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCAEVyB,KAAKzC,MAAMkH,eAAe+D,IAAI,SAACC,GAAD,OAC3BrK,EAAAC,EAAAC,cAACoK,EAAD5I,OAAA6I,OAAA,CACIC,IAAKH,EAAOjL,GACZkB,gBAAiBiJ,EAAKjJ,iBAClB+J,QAKpBrK,EAAAC,EAAAC,cAAA,WAASC,UAAS,kBAAAI,OAAoBmF,EAApB,KAAAnF,OAAqCqF,GAAkBxG,GAAG,kBACxEY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBAAwBC,QAASwB,KAAK6D,qBACjDzF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAW4J,EAAoBvJ,IAAKyF,EAAuBxF,IAAI,YAExET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAAiB2F,KAItC9F,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBAAyBC,QAASwB,KAAKuE,kBAClDnG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0EAA0EH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAG1GH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAEXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAef,GAAG,gBAC5BwC,KAAKzC,MAAM+H,eAAekD,IAAI,SAACrH,GAAD,OAC3B/C,EAAAC,EAAAC,cAACuK,EAAD/I,OAAA6I,OAAA,CACIC,IAAKzH,EAAQ3D,IACT2D,OAIhB/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,QAAMwK,SAAU9I,KAAKkF,iBACjB9G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,GAAGf,GAAG,4BACjBY,EAAAC,EAAAC,cAACyK,EAAA1K,EAAD,CACIwI,KAAK,UACLrJ,GAAG,UACHe,UAAU,gBACVuI,MAAO9G,KAAKwB,MAAMzC,QAClBiK,SAAUhJ,KAAKiF,gBACfgE,OAAQjJ,KAAKoD,WAAW,WACxB8F,mBAAiB,cACjBC,YAAW,sBAAAxK,OAAwByJ,EAAxB,KACXgB,QAAS,KAKjBhL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,UAAQ+K,UAAWvB,EAAWQ,MAAO,CAAEgB,WAAA,GAAA3K,OAAiBoJ,IAAkBwB,KAAK,SAAShL,UAAU,yEAxYrHiL,aA4aV3I,sBAtBS,SAACW,GACrB,MAAO,CACHiD,eAAgBjD,EAAM0E,oBAAoBzB,eAC1CyB,oBAAqB1E,EAAM0E,oBAE3BZ,eAAgB9D,EAAMyB,iBAAiBqC,eACvCrC,iBAAkBzB,EAAMyB,iBAExBwC,mBAAoBjE,EAAMiE,qBAIP,SAACgE,GACxB,MAAO,CACHvG,mBAAoB,SAACC,GAAasG,EAASC,YAA0BvG,KACrEF,iBAAkB,SAACxB,GAAiBgI,EAASE,YAAuBlI,KACpEiG,iBAAkB,SAAChC,GAAe+D,EAASG,YAAuBlE,KAClEhE,WAAY,SAACL,GAAkBoI,EAASI,YAAiBxI,KACzDiB,sBAAuB,WAAQmH,EAASK,kBAIjCjJ,CAA6CjB","file":"static/js/15.a7768dd1.chunk.js","sourcesContent":["import React from 'react';\nimport { userService } from '../../infrastructure';\nimport placeholder_user_image from '../../assets/images/placeholder.png';\n\nconst FriendChatBox = (props) => {\n    const { id, firstName, lastName , online} = props;\n\n    const profilePicUrl = props.profilePicUrl || placeholder_user_image\n\n    let imgClassName = '';\n    if (profilePicUrl) {\n        imgClassName = userService.getImageSize(profilePicUrl);\n    }\n\n    let userNameFormatted = userService.formatUsername(firstName, lastName, 21);\n\n    let onlineStatusClass = online ? 'online-status' : 'offline-status'\n\n    return (\n        <div className=\"messagebox-friend-container\" onClick={(e) => props.showUserChatBox({id, firstName, lastName, profilePicUrl}, e)}>\n            <i className={`fas fa-circle ${onlineStatusClass}`}></i>\n            <div className=\"messagebox-friend-image\">\n                <img className={imgClassName} src={profilePicUrl} alt=\"profilePic\" />\n            </div>\n            <div className=\"messagebox-username-container\" >\n                <p className=\"messagebox-username\">{userNameFormatted} </p>\n            </div>\n        </div>\n    )\n}\n\nexport default FriendChatBox;\n\n","import React from 'react';\nimport { userService } from '../../infrastructure';\nimport placeholder_user_image from '../../assets/images/placeholder.png';\n\nimport './css/Message.css';\n\nconst FriendMessage = (props) => {\n    const { content, fromUserId, time} = props;\n    const loggedInUserId = userService.getUserId();\n\n    let chatContentClass = '';\n\n    if (fromUserId === loggedInUserId) {\n        chatContentClass = 'loggedInUser';\n    }\n\n    const dayTime = props.time.hour <= 12 ? 'AM' : 'PM';\n    const month = props.time.month.substring(0, 1) + props.time.month.substring(1, 5).toLowerCase()\n    const hour = props.time.hour < 10 ? '0' + props.time.hour : props.time.hour;\n    const minute = props.time.minute < 10 ? '0' + props.time.minute : props.time.minute;\n\n    const profilePicUrl = props.fromUserProfilePicUrl || placeholder_user_image\n\n    let imgClassName = '';\n    if (profilePicUrl) {\n        imgClassName = userService.getImageSize(profilePicUrl);\n    }\n\n    return (\n        <div className=\"message-container\">\n            <div className={`message-image ${chatContentClass}`}>\n                <img className={imgClassName} src={profilePicUrl} alt=\"creatorPic\" />\n            </div>\n            <div className={`message-description`}>\n                <p className={`message-content ${chatContentClass}`}> {content} </p>\n                <div className={`message-info ${chatContentClass}`}>\n                    <p className=\"message-time\"> {time.dayOfMonth} {month} {hour}:{minute} {dayTime}</p>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default FriendMessage;\n\n","import React, { Component, Fragment } from 'react';\nimport { userService } from '../../infrastructure';\nimport { toast } from 'react-toastify';\nimport { ToastComponent } from '../common';\nimport TextareaAutosize from 'react-autosize-textarea';\nimport FriendChatBox from './FriendChatBox';\nimport FriendMessage from './FriendMessage';\nimport '../user/css/UserAllPage.css';\nimport './css/MessageBox.css';\nimport { connect } from 'react-redux';\nimport { fetchAllChatFriendsAction, updateUserStatusAction } from '../../store/actions/userActions';\nimport { fetchAllMessagesAction, addMessageAction, fetchAllUnreadMessagesAction } from '../../store/actions/messageActions';\n\nimport Stomp from \"stompjs\";\nimport SockJS from \"sockjs-client\";\n\nclass MessageBox extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            loggedInUserId: '',\n            chatUserId: '',\n            chatUserFirstName: '',\n            chatUserLastName: '',\n            chatUserNameFormatted: '',\n            chatUserProfilePicUrl: '',\n            userBoxHeight: 'toggle',\n            chatBoxHeight: '',\n            chatBoxDisplay: 'display-none',\n            content: '',\n            shouldScrollDown: false,\n            friendsArrLength: 0,\n            clientConnected: false,\n            touched: {\n                content: false,\n            }\n        };\n\n        this._isMounted = false;\n\n        this.serverUrl = userService.getBaseUrl() + '/socket'\n        this.stompClient = null;\n\n        this.handleBlur = this.handleBlur.bind(this);\n        this.onChangeHandler = this.onChangeHandler.bind(this);\n        this.onSubmitHandler = this.onSubmitHandler.bind(this);\n        this.showUserChatBox = this.showUserChatBox.bind(this);\n        this.changeChatBoxDisplay = this.changeChatBoxDisplay.bind(this);\n        this.getAllMessages = this.getAllMessages.bind(this);\n        this.loadAllChatFriends = this.loadAllChatFriends.bind(this);\n    }\n\n    componentDidMount() {\n        const userId = userService.getUserId();\n        this.setState({\n            loggedInUserId: userId,\n        });\n\n        this.initializeWebSocketConnection();\n        this.loadAllChatFriends();\n\n        this._isMounted = true;\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.allMessagesArr !== prevProps.allMessagesArr) {\n            this.setState({\n                content: '',\n            }, () => {\n                if (this.state.shouldScrollDown) {\n                    this.scrollDown();\n                } else {\n                    this.setState({ shouldScrollDown: true }, this.scrollTop())\n                }\n            });\n        }\n\n        if (this.props.friendsChatArr.length !== prevProps.friendsChatArr.length) {\n            this.setState({\n                chatBoxDisplay: 'display-none'\n            })\n        }\n\n        if (this.props.triggerMessageLoad !== prevProps.triggerMessageLoad) {\n            const userData = this.props.triggerMessageLoad;\n            this.showUserChatBox(userData)\n        }\n\n        const errorMessage = this.getErrorMessage(prevProps, prevState);\n        const successMessage = this.getSuccessMessage(prevProps, prevState)\n\n        if (errorMessage) {\n            toast.error(<ToastComponent.errorToast text={errorMessage} />, {\n                position: toast.POSITION.TOP_RIGHT\n            });\n        } else if (successMessage) {\n            toast.success(<ToastComponent.successToast text={successMessage} />, {\n                position: toast.POSITION.TOP_RIGHT\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        this.stompClient.disconnect();\n        this._isMounted = false;\n    }\n\n    getSuccessMessage(prevProps, prevState) {\n        if (!this.props.fetchAllChatFriends.hasError && this.props.fetchAllChatFriends.message && this.props.fetchAllChatFriends !== prevProps.fetchAllChatFriends) {\n            return this.props.fetchAllChatFriends.message;\n        }\n        else if (!this.props.fetchAllMessages.hasError && this.props.fetchAllMessages.message && this.props.fetchAllMessages !== prevProps.fetchAllMessages) {\n            return this.props.fetchAllMessages.message;\n        }\n        return null;\n    }\n\n    getErrorMessage(prevProps, prevState) {\n        if (this.props.fetchAllChatFriends.hasError && prevProps.fetchAllChatFriends.error !== this.props.fetchAllChatFriends.error) {\n            return this.props.fetchAllChatFriends.message || 'Server Error';\n        }\n        else if (this.props.fetchAllMessages.hasError && prevProps.fetchAllMessages.error !== this.props.fetchAllMessages.error) {\n            return this.props.fetchAllMessages.message || 'Server Error';\n        }\n\n        return null;\n    }\n\n    initializeWebSocketConnection = () => {\n        const ws = new SockJS(this.serverUrl);\n        this.stompClient = Stomp.over(ws);\n        const headers = this.getAuthHeader();\n\n        this.stompClient.connect(headers, (frame) => {\n            if (this._isMounted) {\n                this.setState({ clientConnected: true });\n                this.stompClient.subscribe(\"/user/queue/position-update\", (message) => {\n                    if (message.body) {\n                        const messageBody = JSON.parse(message.body);\n                        if (this._isMounted && (messageBody.fromUserId === this.state.chatUserId || messageBody.fromUserId === userService.getUserId())) {\n                            this.props.addMessage(messageBody)\n                        }\n\n                        if (messageBody.fromUserId !== userService.getUserId()) {\n                            const formattedUserNames = userService.formatUsername(messageBody.fromUserFirstName, messageBody.fromUserLastName)\n\n                            toast.info(<ToastComponent.infoToast text={`You have a new message from ${formattedUserNames}!`} />, {\n                                position: toast.POSITION.TOP_RIGHT\n                            });\n\n                            this.props.loadAllUnreadMessages();\n                        }\n                    }\n                });\n\n                this.stompClient.subscribe(\"/chat/login\", (message) => {\n                    if (message.body) {\n                        const parsedBody = JSON.parse(message.body);\n                        this.changeUserOnlineStatus(parsedBody);\n                    }\n                });\n\n                this.stompClient.subscribe(\"/chat/logout\", (message) => {\n                    if (message.body) {\n                        const parsedBody = JSON.parse(message.body);\n                        this.changeUserOnlineStatus(parsedBody);\n                    }\n                });\n            }\n        }, () => {\n            toast.error(<ToastComponent.errorToast text={`Lost connection to ${this.serverUrl}. Refresh the page to reconnect.`} />, {\n                position: toast.POSITION.TOP_RIGHT\n            });\n\n            //// Callback for automatically reconnecting to the server\n            // setTimeout(() => {\n            //     toast.error(<ToastComponent.errorToast text={`Lost connection to ${this.serverUrl}. Trying to reconnect.`} />, {\n            //         position: toast.POSITION.TOP_RIGHT\n            //     });\n            //     this.initializeWebSocketConnection();\n            // }, 10000);\n        });\n    }\n\n    sendMessage(payload) {\n        this.stompClient.send(\"/app/message\", {}, JSON.stringify(payload));\n        this.setState({ content: '' })\n    }\n\n    getAuthHeader = () => {\n        const token = localStorage.getItem(\"token\");\n        return (token && token.length)\n            ? { 'Authorization': `Bearer ${token}` }\n            : {}\n    }\n\n    getAllMessages = (chatUserId) => {\n        this.props.fetchAllMessages(chatUserId);\n    }\n\n    loadAllChatFriends = () => {\n        const userId = userService.getUserId();\n        this.props.loadAllChatFriends(userId);\n    }\n\n    onSubmitHandler(event) {\n        event.preventDefault();\n\n        if (!this.canBeSubmitted()) {\n            return;\n        }\n\n        const { chatUserId: toUserId, content } = this.state;\n\n        if (this.state.clientConnected) {\n            this.sendMessage({ toUserId, content });\n        } else {\n            toast.error(<ToastComponent.errorToast text={`StompClient is disconnected`} />, {\n                position: toast.POSITION.TOP_RIGHT\n            });\n        }\n    }\n\n    onChangeHandler(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    handleBlur = (field) => (event) => {\n        this.setState({\n            touched: { ...this.state.touched, [field]: true }\n        });\n    }\n\n    canBeSubmitted() {\n        const { content } = this.state;\n        const errors = this.validate(content);\n        const isDisabled = Object.keys(errors).some(x => errors[x])\n        return !isDisabled;\n    }\n\n    validate = (content) => {\n        return {\n            content: content.length === 0,\n        }\n    }\n\n    changeHeight = () => {\n        const userBoxHeight = this.state.userBoxHeight;\n        if (userBoxHeight === '') {\n            this.setState({ userBoxHeight: 'toggle' })\n        } else {\n            this.setState({ userBoxHeight: '' })\n        }\n    }\n\n    changeChatBoxHeight = () => {\n        const chatBoxHeight = this.state.chatBoxHeight;\n        if (chatBoxHeight === '') {\n            this.setState({ chatBoxHeight: 'toggle-chat-container' })\n        } else {\n            this.setState({ chatBoxHeight: '' })\n        }\n    }\n\n    changeChatBoxDisplay = () => {\n        const chatBoxDisplay = this.state.chatBoxDisplay;\n        if (chatBoxDisplay === '') {\n            this.setState({ chatBoxDisplay: 'display-none' })\n        } else {\n            this.setState({ chatBoxDisplay: '' })\n        }\n    }\n\n    showUserChatBox = (data, event) => {\n        const { id, firstName, lastName, profilePicUrl } = data\n        let chatUserNameFormatted = userService.formatUsername(firstName, lastName, 18)\n        this.setState({\n            chatUserId: id,\n            chatUserFirstName: firstName,\n            chatUserLastName: lastName,\n            chatUserNameFormatted,\n            chatUserProfilePicUrl: profilePicUrl,\n            shouldScrollDown: true,\n            chatBoxDisplay: '',\n            chatBoxHeight: '',\n            content: '',\n        }, () => {\n            this.getAllMessages(id);\n        })\n    }\n\n    closeUserChatBox = () => {\n        this.setState({ chatBoxDisplay: 'display-none' })\n    }\n\n    scrollToBottom() {\n        const e = document.getElementById('chat-content');\n        e.scrollTop = e.scrollHeight - e.getBoundingClientRect().height;\n    }\n\n    scrollTop() {\n        const container = document.getElementById('chat-content');\n        container.scrollTop = 0;\n    }\n\n    scrollDown() {\n        const container = document.getElementById('chat-content');\n        container.scrollTop = container.scrollHeight\n    }\n\n    getOnlineUserCount = () => {\n        let usersCount = this.props.friendsChatArr.filter(user => { return user.online === true });\n        return usersCount.length;\n    }\n\n    changeUserOnlineStatus(webSocketMessage) {\n        const { userId: id, online } = webSocketMessage;\n        this.props.updateUserStatus({ id, online });\n    }\n\n    render() {\n        if (!this.state.clientConnected) {\n            console.log('Connecting...')\n            return <h1 className=\"text-center pt-5 mt-5\">Connecting...</h1>\n        }\n\n        const { content } = this.state;\n        const errors = this.validate(content);\n        const isEnabled = !Object.keys(errors).some(x => errors[x]);\n        const displayButon = isEnabled ? '' : 'hidden';\n        const loggedInUserFirstName = userService.getFirstName();\n        const userBoxHeight = this.state.userBoxHeight;\n        const chatBoxHeight = this.state.chatBoxHeight;\n        const chatBoxDisplay = this.state.chatBoxDisplay;\n\n        const { chatUserProfilePicUrl, chatUserNameFormatted } = this.state;\n        const imageClassUserPick = userService.getImageSize(chatUserProfilePicUrl);\n        const firstNameFormatted = userService.formatUsername(loggedInUserFirstName);\n\n        return (\n            <Fragment>\n                <section className={`messagebox-container ${userBoxHeight}`} >\n                    <div className=\"messagebox-header\" onClick={this.changeHeight}>\n                        <div className=\"messagebox-chat-icon\">\n                            <i className=\"fas fa-location-arrow\"></i>\n                        </div>\n                        <h4 className=\"chat-title\" style={{ color: ' #333' }}>\n                            Chat &bull; {this.getOnlineUserCount()}\n                        </h4>\n                    </div>\n                    <div className=\"messagebox-friendsChatArr-wrapper\">\n\n                        {this.props.friendsChatArr.map((friend) =>\n                            <FriendChatBox\n                                key={friend.id}\n                                showUserChatBox={this.showUserChatBox}\n                                {...friend}\n                            />\n                        )}\n                    </div>\n                </section>\n                <section className={`chat-container ${chatBoxHeight} ${chatBoxDisplay}`} id=\"chat-container\">\n                    <div className=\"chat-friend-container\" onClick={this.changeChatBoxHeight}>\n                        <div className=\"chat-friend-image\">\n                            <img className={imageClassUserPick} src={chatUserProfilePicUrl} alt=\"bender\" />\n                        </div>\n                        <div className=\"chat-username-container\" >\n                            <p className=\"chat-username\">{chatUserNameFormatted}</p>\n                        </div>\n                    </div>\n\n                    <div className=\"close-button-container\" onClick={this.closeUserChatBox}>\n                        <div className=\"btn chat-uiButtonGroup chat-fbPhotoCurationControl  chat-delete-button\" ><i className=\"fas fa-times\"></i></div>\n                    </div>\n\n                    <div className=\"content-wrapper\">\n\n                        <div className=\"chat-content\" id=\"chat-content\">\n                            {this.props.allMessagesArr.map((message) =>\n                                <FriendMessage\n                                    key={message.id}\n                                    {...message}\n                                />\n                            )}\n                        </div>\n                        <div className=\"chat-footer\">\n                            <div className=\"chat-input-group\">\n                                <div className=\"chat-area-container\">\n                                    <form onSubmit={this.onSubmitHandler}>\n                                        <div className=\"\" id=\"chat-textarea-form-group\">\n                                            <TextareaAutosize\n                                                name=\"content\"\n                                                id=\"content\"\n                                                className=\"chat-textarea\"\n                                                value={this.state.content}\n                                                onChange={this.onChangeHandler}\n                                                onBlur={this.handleBlur('content')}\n                                                aria-describedby=\"contentHelp\"\n                                                placeholder={`Type your message, ${firstNameFormatted}?`}\n                                                maxRows={6}\n                                            >\n                                            </TextareaAutosize>\n                                        </div>\n\n                                        <div className=\"text-center\">\n                                            <button disabled={!isEnabled} style={{ 'visibility': `${displayButon}` }} type=\"submit\" className=\"btn fas fa-location-arrow App-button-primary send-btn\"></button>\n                                        </div>\n                                    </form>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                </section>\n            </Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        friendsChatArr: state.fetchAllChatFriends.friendsChatArr,\n        fetchAllChatFriends: state.fetchAllChatFriends,\n\n        allMessagesArr: state.fetchAllMessages.allMessagesArr,\n        fetchAllMessages: state.fetchAllMessages,\n\n        triggerMessageLoad: state.triggerMessageLoad,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        loadAllChatFriends: (userId) => { dispatch(fetchAllChatFriendsAction(userId)) },\n        fetchAllMessages: (chatUserId) => { dispatch(fetchAllMessagesAction(chatUserId)) },\n        updateUserStatus: (userData) => { dispatch(updateUserStatusAction(userData)) },\n        addMessage: (messageBody) => { dispatch(addMessageAction(messageBody)) },\n        loadAllUnreadMessages: () => { dispatch(fetchAllUnreadMessagesAction()) },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageBox);"],"sourceRoot":""}