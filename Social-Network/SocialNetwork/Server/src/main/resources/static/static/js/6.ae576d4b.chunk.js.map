{"version":3,"sources":["components/user/UserProfilePage.js"],"names":["UserProfilePage","props","_this","Object","C_Users_vaibh_Desktop_SocialMediaWebsite_Social_Network_SocialNetwork_Client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","C_Users_vaibh_Desktop_SocialMediaWebsite_Social_Network_SocialNetwork_Client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","C_Users_vaibh_Desktop_SocialMediaWebsite_Social_Network_SocialNetwork_Client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","initialDataLoad","currentTimeLineUserId","setState","changeTimeLineUser","changeAllPictures","changeAllFriends","onSubmitHandlerDelete","e","history","push","pathname","timeLineUser","id","onSubmitHandlerEdit","state","C_Users_vaibh_Desktop_SocialMediaWebsite_Social_Network_SocialNetwork_Client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","render","timeLineUserRole","authorities","isAdmin","userService","isRoot","isCurrentUserRoot","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","react__WEBPACK_IMPORTED_MODULE_6__","className","style","margin","username","formatUsername","email","firstName","lastName","address","city","isLoggedInUser","_common__WEBPACK_IMPORTED_MODULE_8__","buttonClass","url","text","onClick","concat","loggedInUser","ready","match","params","prevProps","prevState","Component","connect","loggedInUserData","timeLineUserData","dispatch","userId","changeCurrentTimeLineUserAction","changeAllFriendsAction","changeAllPicturesAction"],"mappings":"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","file":"static/js/6.ae576d4b.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { userService } from '../../infrastructure';\nimport { Button, ButtonWithClickEvent } from '../common';\nimport './css/UserProfilePage.css';\n\nimport { connect } from 'react-redux';\nimport { changeCurrentTimeLineUserAction, changeAllFriendsAction } from '../../store/actions/userActions';\nimport { changeAllPicturesAction } from '../../store/actions/pictureActions';\n\nclass UserProfilePage extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            currentTimeLineUserId: '',\n            ready: false\n        }\n    }\n\n    componentDidMount() {\n        const currentTimeLineUserId = this.props.match.params.id\n        this.setState({ currentTimeLineUserId });\n\n        if (currentTimeLineUserId !== this.props.timeLineUser.id) {\n            this.initialDataLoad(currentTimeLineUserId);\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.currentTimeLineUserId !== this.props.match.params.id) {\n            this.initialDataLoad(this.props.match.params.id);\n        }\n    }\n\n    initialDataLoad = (currentTimeLineUserId) => {\n        this.setState({ currentTimeLineUserId },\n            () => {\n                this.props.changeTimeLineUser(currentTimeLineUserId);\n                this.props.changeAllPictures(currentTimeLineUserId);\n                this.props.changeAllFriends(currentTimeLineUserId);\n            }\n        )\n    }\n\n    onSubmitHandlerDelete = (e) => {\n        this.props.history.push({\n            pathname: \"/home/users/delete/\" + this.props.timeLineUser.id,\n        });\n    }\n\n    onSubmitHandlerEdit = (e) => {\n        this.props.history.push({\n            pathname: \"/home/users/edit/\" + this.props.timeLineUser.id,\n            state:\n                { ...this.props.timeLineUser }\n        });\n    }\n\n    render = () => {\n        let timeLineUserRole;\n        if (this.props.timeLineUser.authorities) {\n            timeLineUserRole = this.props.timeLineUser.authorities[0]['authority'];\n        }\n\n        const isAdmin = userService.isAdmin();\n        const isRoot = userService.isRoot();\n        const isCurrentUserRoot = timeLineUserRole === 'ROOT';\n\n        return (\n            <Fragment >\n                <article className=\"main-article-shared-content\">\n                    <section className=\"profile-content-section\">\n                        <div className=\"container mx-auto text-center mb-4 \" >\n                            <h1 className=\"text-center font-weight-bold mt-4\" style={{ 'margin': '1rem auto' }}>Account Details </h1>\n\n                            <div className=\"col-md-6 mx-auto text-center\">\n                                <table className=\"table table-hover mt-3 mx-auto text-center\">\n                                    <thead>\n                                        <tr className=\"row align-center\">\n                                            {/* <th className=\"col-md-6\" scope=\"col\">Category:</th>\n                                <th className=\"col-md-6\" scope=\"col\">Price</th>  */}\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <tr className=\"row\">\n                                            <td className=\"col-md-6\">\n                                                <h5 className=\" font-weight-bold\">Username</h5>\n                                            </td>\n                                            <td className=\"col-md-6 username-color\" >\n                                                <h5>{this.props.timeLineUser.username}</h5>\n                                            </td>\n                                        </tr>\n                                        <tr className=\"row\">\n                                            <td className=\"col-md-6\" >\n                                                <h5 className=\" font-weight-bold\">Email</h5>\n                                            </td>\n                                            <td className=\"col-md-6\">\n                                                <h5>{userService.formatUsername(this.props.timeLineUser.email)}</h5>\n                                            </td>\n                                        </tr>\n                                        <tr className=\"row\">\n                                            <td className=\"col-md-6\" >\n                                                <h5 className=\" font-weight-bold\">First Name</h5>\n                                            </td>\n                                            <td className=\"col-md-6\" >\n                                                <h5>{userService.formatUsername(this.props.timeLineUser.firstName)}</h5>\n                                            </td>\n                                        </tr>\n                                        <tr className=\"row\">\n                                            <td className=\"col-md-6\" >\n                                                <h5 className=\" font-weight-bold\">Last Name</h5>\n                                            </td>\n                                            <td className=\"col-md-6\" >\n                                                <h5>{userService.formatUsername(this.props.timeLineUser.lastName)}</h5>\n                                            </td>\n                                        </tr>\n                                        <tr className=\"row\">\n                                            <td className=\"col-md-6\" >\n                                                <h5 className=\" font-weight-bold\">Address</h5>\n                                            </td>\n                                            <td className=\"col-md-6\">\n                                                <h5>{userService.formatUsername(this.props.timeLineUser.address)}</h5>\n                                            </td>\n                                        </tr>\n                                        <tr className=\"row\">\n                                            <td className=\"col-md-6\" >\n                                                <h5 className=\" font-weight-bold\">City</h5>\n                                            </td>\n                                            <td className=\"col-md-6\" >\n                                                <h5>{userService.formatUsername(this.props.timeLineUser.city)}</h5>\n                                            </td>\n                                        </tr>\n                                        {(isAdmin || isRoot) && <tr className=\"row\">\n                                            <td className=\"col-md-6\" >\n                                                <h5 className=\" font-weight-bold\">Role</h5>\n                                            </td>\n                                            <td className=\"col-md-6\" >\n                                                <h5>{timeLineUserRole}</h5>\n                                            </td>\n                                        </tr>}\n\n                                    </tbody>\n                                </table>\n                                <div className=\"hr-styles\"></div>\n                                <div className=\"d-flex justify-content-center \">\n                                    {(((isRoot || isAdmin) && !isCurrentUserRoot) || userService.isLoggedInUser(this.props.timeLineUser.username)) && <ButtonWithClickEvent buttonClass={\"btn App-button-primary btn-lg m-3\"} url={`/home/users/edit/`} text={\"Edit\"} onClick={this.onSubmitHandlerEdit} />}\n                                    {((isRoot) && !userService.isLoggedInUser(this.props.timeLineUser.username)) && <ButtonWithClickEvent buttonClass={\"btn App-button-primary btn-lg m-3\"} url={`/home/users/delete/`} text={\"Delete\"} onClick={this.onSubmitHandlerDelete} />}\n                                    {(isAdmin || isRoot) && <Button buttonClass={\"btn App-button-primary btn-lg m-3\"} url={`/home/users/all/${this.props.loggedInUser.id}`} text={\"All Users\"} />}\n\n                                </div >\n                            </div >\n                        </div >\n                    </section>\n                </article>\n            </Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        loggedInUser: state.loggedInUserData,\n        timeLineUser: state.timeLineUserData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        changeTimeLineUser: (userId) => { dispatch(changeCurrentTimeLineUserAction(userId)) },\n        changeAllFriends: (userId) => {dispatch(changeAllFriendsAction(userId))},\n        changeAllPictures: (userId) => {dispatch(changeAllPicturesAction(userId))},\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserProfilePage);"],"sourceRoot":""}