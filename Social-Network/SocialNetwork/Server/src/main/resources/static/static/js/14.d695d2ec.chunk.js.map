{"version":3,"sources":["components/user/LogsRow.js","store/actions/logsActions.js","components/user/UserLogsPage.js"],"names":["UserRow","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","promote","event","preventDefault","id","state","requester","post","response","success","setState","role","toast","react_default","a","createElement","common","successToast","text","message","position","POSITION","TOP_RIGHT","error","errorToast","catch","err","concat","status","localStorage","clear","history","push","demote","render","className","index","style","color","username","method","action","tableName","time","bind","assertThisInitialized","objectSpread","Component","fetchAllLogsSuccess","type","FETCH_ALL_LOGS_SUCCESS","payload","fetchAllLogsError","path","FETCH_ALL_LOGS_ERROR","fetchAllLogsAction","dispatch","FETCH_ALL_LOGS_BEGIN","get","findByUserNameError","FINDBYUSERNAME_LOGS_ERROR","findLogsByUserNameAction","search","FINDBYUSERNAME_LOGS_BEGIN","FINDBYUSERNAME_LOGS_SUCCESS","findByUserNameSuccess","clearByUserNameError","CLEARBYUSERNAME_LOGS_ERROR","clearLogsByUserNameAction","selected","CLEARBYUSERNAME_LOGS_BEGIN","delete","CLEARBYUSERNAME_LOGS_SUCCESS","clearByUserNameSuccess","clearAllLogsError","CLEAR_ALL_LOGS_ERROR","clearAllLogsAction","CLEAR_ALL_LOGS_BEGIN","CLEAR_ALL_LOGS_SUCCESS","clearAllLogsSuccess","override","css","_templateObject","UserLogsPage","loadAllLogs","searchLogs","loadLogsByUserName","clearAllLogs","deleteAllLogs","clearSelectedLogs","deleteLogsByUserName","onChangeHandler","loggedInUserId","userService","getUserId","timeLineUserData","changeTimeLineUser","changeAllPictures","changeAllFriends","prevProps","prevState","errorMessage","getErrorMessage","successMessage","getSuccessMessage","console","log","fetchAllLogs","hasError","findLogsByUserName","clearLogsByUserName","defineProperty","target","name","value","_this2","loading","react","margin","htmlFor","placeholder","aria-label","onChange","background","onClick","isRoot","logsArr","length","scope","react_spinners","sizeUnit","size","map","i","LogsRow_UserRow","assign","key","connect","loggedInUserData","userId","changeCurrentTimeLineUserAction","changeAllFriendsAction","changeAllPicturesAction"],"mappings":"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","file":"static/js/14.d695d2ec.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { requester } from '../../infrastructure'\nimport { toast } from 'react-toastify';\nimport { ToastComponent } from '../common'\n\nexport default class UserRow extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            id: '',\n            username: '',\n            method: '',\n            tableName: '',\n            action: '',\n            time: ''\n        }\n\n        this.promote = this.promote.bind(this);\n        this.demote = this.demote.bind(this);\n    }\n\n    componentDidMount(){\n        this.setState({...this.props})\n    }\n\n    promote = (event) => {\n        event.preventDefault();\n        const id = this.state.id;\n        requester.post('/users/promote?id=' + id, id, (response) => {\n            if (response.success) {\n                this.setState({role: 'ADMIN'})\n                toast.success(<ToastComponent.successToast text={response.message} />, {\n                    position: toast.POSITION.TOP_RIGHT\n                });\n            } else {\n                toast.error(<ToastComponent.errorToast text={response.message} />, {\n                    position: toast.POSITION.TOP_RIGHT\n                });\n            }\n        }).catch(err => {\n            toast.error(<ToastComponent.errorToast text={`Internal Server Error: ${err.message}`} />, {\n                position: toast.POSITION.TOP_RIGHT\n            });\n\n            if(err.status === 403 && err.message === 'Your JWT token is expired. Please log in!'){\n                localStorage.clear();\n                this.props.history.push('/login');\n            }\n        })\n    }\n\n    demote = (event) => {\n        event.preventDefault();\n        const id = this.state.id;\n        requester.post('/users/demote?id=' + id, id, (response) => {\n            if (response.success) {\n                this.setState({role: 'USER'})\n                toast.success(<ToastComponent.successToast text={response.message} />, {\n                    position: toast.POSITION.TOP_RIGHT\n                });\n            } else {\n                toast.error(<ToastComponent.errorToast text={response.message} />, {\n                    position: toast.POSITION.TOP_RIGHT\n                });\n            }\n\n        }).catch(err => {\n            toast.error(<ToastComponent.errorToast text={`Internal Server Error: ${err.message}`} />, {\n                position: toast.POSITION.TOP_RIGHT\n            });\n\n            if(err.status === 403 && err.message === 'Your JWT token is expired. Please log in!'){\n                localStorage.clear();\n                this.props.history.push('/login');\n            }\n        })\n    }\n\n    render = () => {\n        return (\n            <tr className=\"row\" >\n                <td className=\"col-md-1 font-weight-bold\" >\n                   {this.state.index}\n                </td>\n                <td className=\"col-md-2\" style={{'color':'#40a3f4'}}>\n                   {this.state.username}\n                </td>\n\n                <td className=\"col-md-2 py-auto\" >\n                    {this.state.method}\n                </td>\n\n                <td className=\"col-md-2\" >\n                   {this.state.action}\n                </td>\n\n                <td className=\"col-md-2\" >\n                    {this.state.tableName}\n                </td>\n\n                <td className=\"col-md-3\" >\n                    {this.state.time}\n                </td>\n            </tr>\n        )\n    }\n}\n\n","import { requester } from '../../infrastructure';\nimport {\n    FETCH_ALL_LOGS_SUCCESS, FETCH_ALL_LOGS_BEGIN, FETCH_ALL_LOGS_ERROR,\n    FINDBYUSERNAME_LOGS_SUCCESS, FINDBYUSERNAME_LOGS_BEGIN, FINDBYUSERNAME_LOGS_ERROR,\n    CLEARBYUSERNAME_LOGS_SUCCESS, CLEARBYUSERNAME_LOGS_BEGIN, CLEARBYUSERNAME_LOGS_ERROR,\n    CLEAR_ALL_LOGS_SUCCESS, CLEAR_ALL_LOGS_BEGIN, CLEAR_ALL_LOGS_ERROR,\n} from './actionTypes';\n\n// fetchAllLogs\nfunction fetchAllLogsSuccess(response) {\n    return {\n        type: FETCH_ALL_LOGS_SUCCESS,\n        payload: response\n    }\n}\n\nfunction fetchAllLogsBegin() {\n    return {\n        type: FETCH_ALL_LOGS_BEGIN,\n    }\n}\n\nfunction fetchAllLogsError(error, message, status, path) {\n    return {\n        type: FETCH_ALL_LOGS_ERROR,\n        error,\n        message,\n        status,\n        path,\n    }\n}\n\nfunction fetchAllLogsAction() {\n    return (dispatch) => {\n        dispatch(fetchAllLogsBegin())\n        return requester.get('/logs/all', (response) => {\n            if (response.error) {\n                const { error, message, status, path } = response;\n                dispatch(fetchAllLogsError(error, message, status, path));\n            } else {\n                // dispatch(changeAllPicturesAction(timeLineUserId));\n                dispatch(fetchAllLogsSuccess(response));\n            }\n        }).catch(err => {\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n                localStorage.clear();\n            }\n            dispatch(fetchAllLogsError('', `Error: ${err.message}`, err.status, ''));\n        })\n    }\n};\n\n// findByUserName\nfunction findByUserNameSuccess(response, search) {\n    return {\n        type: FINDBYUSERNAME_LOGS_SUCCESS,\n        payload: response,\n        message: `Successfully loaded logs for \"${search}\".`\n    }\n}\n\nfunction findByUserNameBegin() {\n    return {\n        type: FINDBYUSERNAME_LOGS_BEGIN,\n    }\n}\n\nfunction findByUserNameError(error, message, status, path) {\n    return {\n        type: FINDBYUSERNAME_LOGS_ERROR,\n        error,\n        message,\n        status,\n        path,\n    }\n}\n\nfunction findLogsByUserNameAction(search) {\n    return (dispatch) => {\n        dispatch(findByUserNameBegin())\n        return requester.get('/logs/findByUserName/' + search, (response) => {\n            if (response.error) {\n                const { error, message, status, path } = response;\n                dispatch(findByUserNameError(error, message, status, path));\n            } else {\n                dispatch(fetchAllLogsSuccess(response));\n                dispatch(findByUserNameSuccess(response, search));\n            }\n        }).catch(err => {\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n                localStorage.clear();\n            }\n            dispatch(findByUserNameError('', `Error: ${err.message}`, err.status, ''));\n        })\n    }\n};\n\n// clearByUserName\nfunction clearByUserNameSuccess(response) {\n    return {\n        type: CLEARBYUSERNAME_LOGS_SUCCESS,\n        payload: response,\n    }\n}\n\nfunction clearByUserNameBegin() {\n    return {\n        type: CLEARBYUSERNAME_LOGS_BEGIN,\n    }\n}\n\nfunction clearByUserNameError(error, message, status, path) {\n    return {\n        type: CLEARBYUSERNAME_LOGS_ERROR,\n        error,\n        message,\n        status,\n        path,\n    }\n}\n\nfunction clearLogsByUserNameAction(selected) {\n    return (dispatch) => {\n        dispatch(clearByUserNameBegin())\n        return requester.delete('/logs/clearByName/' + selected, {}, (response) => {\n            if (response.error) {\n                const { error, message, status, path } = response;\n                dispatch(clearByUserNameError(error, message, status, path));\n            } else {\n                dispatch(clearByUserNameSuccess(response));\n                dispatch(fetchAllLogsAction());\n            }\n        }).catch(err => {\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n                localStorage.clear();\n            }\n            dispatch(clearByUserNameError('', `Error: ${err.message}`, err.status, ''));\n        })\n    }\n};\n\n// clearAllLogs\nfunction clearAllLogsSuccess(response) {\n    return {\n        type: CLEAR_ALL_LOGS_SUCCESS,\n        payload: response,\n    }\n}\n\nfunction clearAllLogsBegin() {\n    return {\n        type: CLEAR_ALL_LOGS_BEGIN,\n    }\n}\n\nfunction clearAllLogsError(error, message, status, path) {\n    return {\n        type: CLEAR_ALL_LOGS_ERROR,\n        error,\n        message,\n        status,\n        path,\n    }\n}\n\nfunction clearAllLogsAction() {\n    return (dispatch) => {\n        dispatch(clearAllLogsBegin())\n        return requester.delete('/logs/clear', {}, (response) => {\n            if (response.error) {\n                const { error, message, status, path } = response;\n                dispatch(clearAllLogsError(error, message, status, path));\n            } else {\n                dispatch(clearAllLogsSuccess(response));\n            }\n        }).catch(err => {\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n                localStorage.clear();\n            }\n            dispatch(clearAllLogsError('', `Error: ${err.message}`, err.status, ''));\n        })\n    }\n};\n\nexport { fetchAllLogsAction, findLogsByUserNameAction, clearLogsByUserNameAction, clearAllLogsAction };","import React, { Component, Fragment } from 'react';\nimport LogsRow from './LogsRow';\nimport { userService } from '../../infrastructure';\nimport { toast } from 'react-toastify';\nimport { ToastComponent } from '../common';\nimport './css/UserLogsPage.css';\nimport { css } from '@emotion/core';\nimport { CircleLoader } from 'react-spinners';\n\nimport { connect } from 'react-redux';\nimport { changeCurrentTimeLineUserAction, changeAllFriendsAction } from '../../store/actions/userActions';\nimport { changeAllPicturesAction } from '../../store/actions/pictureActions';\nimport { fetchAllLogsAction, findLogsByUserNameAction, clearLogsByUserNameAction, clearAllLogsAction } from '../../store/actions/logsActions';\n\nconst override = css`\n        display: block;\n        margin: 0 auto;\n        border-color: red;\n`;\n\nclass UserLogsPage extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            search: '',\n            selected: '',\n        };\n\n        this.onChangeHandler = this.onChangeHandler.bind(this);\n        this.loadAllLogs = this.loadAllLogs.bind(this);\n        this.searchLogs = this.searchLogs.bind(this);\n        this.clearAllLogs = this.clearAllLogs.bind(this);\n        this.clearSelectedLogs = this.clearSelectedLogs.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadAllLogs();\n\n        const loggedInUserId = userService.getUserId();\n        if (loggedInUserId !== this.props.timeLineUserData.id) {\n            this.props.changeTimeLineUser(loggedInUserId);\n            this.props.changeAllPictures(loggedInUserId);\n            this.props.changeAllFriends(loggedInUserId);\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const errorMessage = this.getErrorMessage(prevProps);\n        const successMessage = this.getSuccessMessage(prevProps)\n\n        if (errorMessage) {\n            toast.error(<ToastComponent.errorToast text={errorMessage} />, {\n                position: toast.POSITION.TOP_RIGHT\n            });\n        } else if (successMessage) {\n            console.log('this.state: ', this.state)\n            toast.success(<ToastComponent.successToast text={successMessage} />, {\n                position: toast.POSITION.TOP_RIGHT\n            });\n        }\n    }\n\n    getSuccessMessage(prevProps) {\n        if (!this.state.search && !this.props.fetchAllLogs.hasError && this.props.fetchAllLogs.message && this.props.fetchAllLogs !== prevProps.fetchAllLogs) {\n            return this.props.fetchAllLogs.message;\n        } else if (!this.props.findLogsByUserName.hasError && this.props.findLogsByUserName.message && this.props.findLogsByUserName !== prevProps.findLogsByUserName) {\n            return this.props.findLogsByUserName.message;\n        } else if (!this.props.clearLogsByUserName.hasError && this.props.clearLogsByUserName.message && this.props.clearLogsByUserName !== prevProps.clearLogsByUserName) {\n            this.setState({\n                selected: '',\n                search: '',\n            })\n            return this.props.clearLogsByUserName.message;\n        } else if (!this.props.clearAllLogs.hasError && this.props.clearAllLogs.message && this.props.clearAllLogs !== prevProps.clearAllLogs) {\n            this.setState({\n                selected: '',\n                search: '',\n            })\n\n            return this.props.clearAllLogs.message;\n        }\n\n        return null;\n    }\n\n    getErrorMessage(prevProps) {\n        if (this.props.fetchAllLogs.hasError && prevProps.fetchAllLogs.error !== this.props.fetchAllLogs.error) {\n            return this.props.fetchAllLogs.message || 'Server Error';\n        }\n        else if (this.props.findLogsByUserName.hasError && prevProps.findLogsByUserName.error !== this.props.findLogsByUserName.error) {\n            this.setState({\n                selected: '',\n            })\n            return this.props.findLogsByUserName.message || 'Server Error';\n        } else if (this.props.clearLogsByUserName.hasError && prevProps.clearLogsByUserName.error !== this.props.clearLogsByUserName.error) {\n            return this.props.clearLogsByUserName.message || 'Server Error';\n        } else if (this.props.clearAllLogs.hasError && prevProps.clearAllLogs.error !== this.props.clearAllLogs.error) {\n            return this.props.clearAllLogs.message || 'Server Error';\n        }\n\n        return null;\n    }\n\n    onChangeHandler(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    loadAllLogs = () => {\n        this.setState({\n            selected: '',\n            search: '',\n        }, () => this.props.loadAllLogs())\n    }\n\n    searchLogs = () => {\n        const search = this.state.search;\n        if (!search) {\n            this.props.loadAllLogs();\n        } else {\n            this.setState({\n                selected: search,\n            }, () => this.props.loadLogsByUserName(search))\n        }\n    }\n\n    clearAllLogs = () => {\n        this.props.deleteAllLogs();\n    }\n\n    clearSelectedLogs = () => {\n        const selected = this.state.selected;\n        if (!selected) {\n            return;\n        }\n\n        this.props.deleteLogsByUserName(selected);\n    }\n\n    render() {\n        const loading = this.props.fetchAllLogs.loading || this.props.findLogsByUserName.loading\n            || this.props.clearLogsByUserName.loading || this.props.clearAllLogs.loading;\n\n        if (loading) {\n            // return <h1 className=\"text-center pt-5 mt-5\">Loading...</h1>\n        }\n\n        const selected = this.state.selected;\n\n        return (\n            <Fragment >\n                <article className=\"main-article-shared-content\">\n                    <section className=\"logs-content-section\">\n                        <div className=\"container col-md-11 text-center mx-auto mb-4\">\n                            <h1 className=\"text-center font-weight-bold mt-4\" style={{ 'margin': '1rem auto' }}>Server Logs History</h1>\n                            <div className=\"hr-styles\"></div>\n\n                            <div className=\"col-md-4 mx-auto mb-3\" >\n                                <label className=\"form-control-label font-weight-bold\" htmlFor=\"search\">Enter Username:</label>\n                                <input\n                                    className=\"form-control mx-auto\"\n                                    type=\"search\"\n                                    placeholder=\"Search\"\n                                    aria-label=\"Search\"\n                                    name=\"search\"\n                                    id=\"search\"\n                                    value={this.state.search}\n                                    onChange={this.onChangeHandler}\n                                    style={{ background: '#EEE' }}\n                                />\n                            </div>\n\n                            <div className=\"col-md-5 d-flex justify-content-center mx-auto mb-5\" >\n                                <h5>\n                                    <button className=\"btn update-info m-1\" onClick={this.searchLogs} >SEARCH</button>\n                                </h5>\n\n                                <h5>\n                                    <button className=\"btn update-info m-1\" onClick={this.loadAllLogs} >ALL LOGS</button>\n                                </h5>\n                                {userService.isRoot() && this.props.logsArr.length > 0 &&\n                                    <h5>\n                                        <button className=\"btn update-info m-1\" onClick={this.clearAllLogs} >CLEAR ALL</button>\n                                    </h5>}\n\n                                {userService.isRoot() && selected &&\n                                    <h5>\n                                        <button className=\"btn update-info m-1\" onClick={this.clearSelectedLogs} >CLEAR SELECTED</button>\n                                    </h5>}\n                            </div>\n\n                            {this.props.logsArr.length > 0\n                                ?\n                                <table className=\"table table-hover mt-3 w-80 mx-auto text-center\">\n                                    <thead>\n                                        <tr className=\"row \" >\n                                            <th className=\"col-md-1 \" scope=\"col\">#</th>\n                                            <th className=\"col-md-2\" scope=\"col\">Username</th>\n                                            <th className=\"col-md-2 \" scope=\"col\">Method</th>\n\n                                            <th className=\"col-md-2 \" scope=\"col\">Action</th>\n                                            <th className=\"col-md-2\" scope=\"col\">Modified Table</th>\n\n                                            <th className=\"col-md-3 \" scope=\"col\">Time</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {loading\n                                            ?\n                                            <CircleLoader\n                                                css={override}\n                                                sizeUnit={\"px\"}\n                                                size={150}\n                                                color={'#61dafb'}\n                                                loading={true}\n                                            /> :\n\n                                            this.props.logsArr.map((log, i) => <LogsRow key={log.id} index={i + 1} {...this.props} {...log} />)}\n                                    </tbody>\n                                </table>\n                                :\n                                loading ?\n                                    <Fragment>\n                                        <CircleLoader\n                                            css={override}\n                                            sizeUnit={\"px\"}\n                                            size={150}\n                                            color={'#61dafb'}\n                                            loading={true}\n                                        />\n                                    </Fragment> :\n                                    <Fragment>\n                                        <div className=\"hr-styles\"></div>\n                                        <h3 className=\"mt-5 mb-5 mx-auto display-5 text-center App-secondary-color\">Logs history is empty. </h3>\n                                        <div className=\"hr-styles\"></div>\n                                    </Fragment>\n                            }\n                        </div>\n                    </section>\n                </article>\n            </Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        timeLineUserData: state.timeLineUserData,\n        loggedInUserData: state.loggedInUserData,\n\n        fetchAllLogs: state.fetchAllLogs,\n        logsArr: state.fetchAllLogs.logsArr,\n\n        findLogsByUserName: state.findLogsByUserName,\n        clearLogsByUserName: state.clearLogsByUserName,\n        clearAllLogs: state.clearAllLogs,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        changeTimeLineUser: (userId) => { dispatch(changeCurrentTimeLineUserAction(userId)) },\n        changeAllFriends: (userId) => { dispatch(changeAllFriendsAction(userId)) },\n        changeAllPictures: (userId) => { dispatch(changeAllPicturesAction(userId)) },\n\n        loadAllLogs: () => { dispatch(fetchAllLogsAction()) },\n        loadLogsByUserName: (search) => { dispatch(findLogsByUserNameAction(search)) },\n        deleteLogsByUserName: (selected) => { dispatch(clearLogsByUserNameAction(selected)) },\n        deleteAllLogs: () => { dispatch(clearAllLogsAction()) },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserLogsPage);"],"sourceRoot":""}